import type { Meta, StoryObj } from '@storybook/react';
import React from 'react';
import SettingsListItem, { SettingListItemProps } from '../SettingsListItem';

// Interface para os controles customizados do Storybook
interface StoryControls extends SettingListItemProps {
  hasButton: boolean;
  buttonText: string;
  buttonVariant:
    | 'primary'
    | 'primaryCritical'
    | 'secondary'
    | 'secondaryCritical'
    | 'tertiary'
    | 'tertiaryCritical'
    | 'textTertiary'
    | 'textTertiaryCritical'
    | 'inverse';
  hasTag: boolean;
  tagText: string;
  tagType:
    | 'positive'
    | 'warning'
    | 'negative'
    | 'neutral'
    | 'neutral-02'
    | 'neutral-03'
    | 'default';
}

const meta: Meta<StoryControls> = {
  title: 'Components/SettingsListItem',
  component: SettingsListItem,
  tags: ['autodocs'],
  argTypes: {
    showDivider: {
      control: 'boolean',
      table: {
        category: 'üé® Apar√™ncia',
        defaultValue: { summary: 'true' },
      },
    },
    // === CONTE√öDO PRINCIPAL ===
    title: {
      description: 'T√≠tulo principal do item de configura√ß√£o.',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
      },
    },
    description: {
      description: 'Descri√ß√£o detalhada do item de configura√ß√£o.',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
      },
    },
    strikethroughDescription: {
      description: 'Descri√ß√£o com linha cortada.',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
      },
    },
    caption: {
      description: 'Legenda ou informa√ß√£o adicional.',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
      },
    },
    errorMessage: {
      description: 'Mensagem de erro quando presente.',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
      },
    },
    button: {
      control: false,
    },
    tag: {
      control: false,
    },
    // === BUTTON CONTROLS ===
    hasButton: {
      name: 'Exibir Bot√£o',
      description: 'Mostra ou oculta o bot√£o no item.',
      control: 'boolean',
      table: {
        category: 'üîò Button',
      },
    },
    buttonText: {
      name: 'Texto do Bot√£o',
      description: 'Texto exibido no bot√£o.',
      control: 'text',
      if: { arg: 'hasButton', truthy: true },
      table: {
        category: 'üîò Button',
      },
    },
    buttonVariant: {
      name: 'Variante do Bot√£o',
      description: 'Estilo visual do bot√£o.',
      control: 'select',
      options: [
        'primary',
        'primaryCritical',
        'secondary',
        'secondaryCritical',
        'tertiary',
        'tertiaryCritical',
        'textTertiary',
        'textTertiaryCritical',
        'inverse',
      ],
      if: { arg: 'hasButton', truthy: true },
      table: {
        category: 'üîò Button',
      },
    },

    // === TAG CONTROLS ===
    hasTag: {
      name: 'Exibir Tag',
      description: 'Mostra ou oculta a tag no item.',
      control: 'boolean',
      table: {
        category: 'üè∑Ô∏è Tag',
      },
    },
    tagText: {
      name: 'Texto da Tag',
      description: 'Texto exibido na tag.',
      control: 'text',
      if: { arg: 'hasTag', truthy: true },
      table: {
        category: 'üè∑Ô∏è Tag',
      },
    },
    tagType: {
      name: 'Tipo da Tag',
      description: 'Tipo da tag com cores predefinidas.',
      control: 'select',
      options: [
        'positive',
        'warning',
        'negative',
        'neutral',
        'neutral-02',
        'neutral-03',
        'default',
      ],
      if: { arg: 'hasTag', truthy: true },
      table: {
        category: 'üè∑Ô∏è Tag',
      },
    },

    // === ESTADOS E COMPORTAMENTO ===
    disabled: {
      description: 'Desabilita o item de configura√ß√£o.',
      control: 'boolean',
      table: {
        category: '‚öôÔ∏è Estados',
      },
    },
    loading: {
      description: 'Exibe estado de carregamento.',
      control: 'boolean',
      table: {
        category: '‚öôÔ∏è Estados',
      },
    },
    type: {
      description: 'Tipo visual do item.',
      control: 'select',
      options: ['default', 'inverted'],
      table: {
        category: 'üé® Apar√™ncia',
      },
    },
    state: {
      description: 'Estado do item.',
      control: 'select',
      options: [
        'default',
        'inactive',
        'positive',
        'warning',
        'highlight',
        'highlight-light',
        'strikethrough',
      ],
      table: {
        category: '‚öôÔ∏è Estados',
      },
    },
    blocked: {
      description: 'Bloqueia o item de configura√ß√£o.',
      control: 'boolean',
      table: {
        category: '‚öôÔ∏è Estados',
      },
    },
  },
};

export default meta;

type Story = StoryObj<StoryControls>;

export const Usage: Story = {
  args: {
    title: 'Label',
    description: 'Description',
    caption: 'Caption',
    hasButton: true,
    buttonText: 'Ativar',
    buttonVariant: 'primary',
    hasTag: false,
    tagText: 'Status',
    tagType: 'positive',
    disabled: false,
    loading: false,
    type: 'default',
  },
  render: ({
    hasButton,
    buttonText,
    buttonVariant,

    hasTag,
    tagText,
    tagType,
    ...args
  }) => (
    <SettingsListItem
      {...args}
      button={
        hasButton
          ? {
              children: buttonText,
              variant: buttonVariant,
            }
          : undefined
      }
      tag={
        hasTag
          ? {
              children: tagText,
              variant: 'default',
              type: tagType,
            }
          : undefined
      }
    />
  ),
  decorators: [
    (StoryComponent: React.ComponentType): JSX.Element => (
      <div style={{ width: '360px' }}>
        <StoryComponent />
      </div>
    ),
  ],
};

// Exemplos pr√©-configurados mostrando diferentes combina√ß√µes
export const QuickExamples: Story = {
  parameters: {
    docs: {
      description: {
        story:
          '‚ú® **Exemplos prontos** com as configura√ß√µes mais comuns do SettingsListItem',
      },
    },
    controls: { disable: true },
  },
  render: () => (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '16px',
        width: '360px',
      }}
    >
      <SettingsListItem
        title="Com Button Prim√°rio"
        description="Item com bot√£o de a√ß√£o principal"
        caption="Clique para ativar"
        button={{
          children: 'Ativar',
          variant: 'primary',
          size: 'sm',
        }}
      />

      <SettingsListItem
        title="Com Tag Positiva"
        description="Item com status ativo"
        caption="Funcionalidade habilitada"
        tag={{
          children: 'Ativo',
          variant: 'default',
          type: 'positive',
        }}
      />

      <SettingsListItem
        title="Com Tag de Alerta"
        description="Item que precisa de aten√ß√£o"
        caption="Configura√ß√£o pendente"
        tag={{
          children: 'Aten√ß√£o',
          variant: 'default',
          type: 'warning',
        }}
      />
    </div>
  ),
};

export const WithButton: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <SettingsListItem
      title="Autentica√ß√£o de Dois Fatores"
      description="Adicione uma camada extra de seguran√ßa √† sua conta"
      caption="Recomendado para maior seguran√ßa"
      button={{
        children: 'Ativar',
        variant: 'primary',
        size: 'sm',
      }}
    />
  ),
};

export const WithTag: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <SettingsListItem
      title="Sincroniza√ß√£o Autom√°tica"
      description="Sincronize seus dados automaticamente em todos os dispositivos"
      caption="√öltima sincroniza√ß√£o: agora"
      tag={{
        children: 'Ativo',
        variant: 'default',
      }}
    />
  ),
};

export const WithError: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <SettingsListItem
      title="Backup de Dados"
      description="Configure o backup autom√°tico dos seus dados"
      caption="Configura√ß√£o pendente"
      errorMessage="Falha ao conectar com o servi√ßo de backup"
      button={{
        children: 'Tentar Novamente',
        variant: 'secondary',
        size: 'sm',
      }}
    />
  ),
};

export const Disabled: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <SettingsListItem
      title="An√°lise de Comportamento"
      description="Permita que coletemos dados an√¥nimos para melhorar o servi√ßo"
      caption="Funcionalidade temporariamente indispon√≠vel"
      disabled
      button={{
        children: 'Configurar',
        variant: 'secondary',
        size: 'sm',
      }}
    />
  ),
};

export const Loading: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <div style={{ width: '320px' }}>
      <SettingsListItem
        title="Tema da Interface"
        description="Escolha entre tema claro, escuro ou autom√°tico"
        caption="Aplicando altera√ß√µes..."
        loading
        button={{
          children: 'Salvar',
          variant: 'primary',
          size: 'sm',
        }}
      />
    </div>
  ),
};

export const Complete: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
      <SettingsListItem
        title="Invertido"
        description="Item com descri√ß√£o invertida"
        caption="Legenda invertida"
        type="inverted"
        button={{
          children: 'Label',
        }}
      />

      <SettingsListItem
        title="Com Bot√£o de A√ß√£o"
        description="Item com bot√£o para realizar a√ß√µes"
        caption="Clique no bot√£o para configurar"
        button={{
          children: 'Configurar',
          variant: 'primary',
          size: 'sm',
        }}
      />

      <SettingsListItem
        title="Com Status Ativo"
        description="Item com tag indicando status"
        caption="Funcionalidade habilitada"
        tag={{
          children: 'Ativo',
          variant: 'default',
        }}
      />

      <SettingsListItem
        title="Com Erro"
        description="Item com mensagem de erro"
        caption="Verifica√ß√£o falhhou"
        errorMessage="N√£o foi poss√≠vel validar as configura√ß√µes"
        button={{
          children: 'Tentar Novamente',
          variant: 'secondary',
          size: 'sm',
        }}
      />

      <SettingsListItem
        title="Carregando"
        description="Item em estado de carregamento"
        caption="Processando..."
        loading
        button={{
          children: 'Processando',
          variant: 'primary',
          size: 'sm',
        }}
      />

      <SettingsListItem
        title="Desabilitado"
        description="Item temporariamente indispon√≠vel"
        caption="Funcionalidade em manuten√ß√£o"
        disabled
        tag={{
          children: 'Indispon√≠vel',
          variant: 'default',
        }}
      />
    </div>
  ),
};
