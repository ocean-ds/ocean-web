import type { Meta, StoryObj } from '@storybook/react';
import React from 'react';
import SettingsListItem, { SettingListItemProps } from '../SettingsListItem';

interface StoryControls extends SettingListItemProps {
  hasButton: boolean;
  buttonText: string;
  buttonVariant:
    | 'primary'
    | 'primaryCritical'
    | 'secondary'
    | 'secondaryCritical'
    | 'tertiary'
    | 'tertiaryCritical'
    | 'textTertiary'
    | 'textTertiaryCritical'
    | 'inverse';
  hasTag: boolean;
  tagText: string;
  tagType:
    | 'positive'
    | 'warning'
    | 'negative'
    | 'neutral'
    | 'neutral-02'
    | 'neutral-03'
    | 'default';
}

const meta: Meta<StoryControls> = {
  title: 'Components/SettingsListItem',
  component: SettingsListItem,
  tags: ['autodocs'],
  argTypes: {
    // === CONTE√öDO PRINCIPAL ===
    title: {
      description: 'T√≠tulo principal do item de configura√ß√£o (obrigat√≥rio).',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
        type: { summary: 'string' },
      },
    },
    description: {
      description: 'Descri√ß√£o detalhada do item de configura√ß√£o (opcional).',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
        type: { summary: 'string' },
      },
    },
    strikethroughDescription: {
      description:
        'Texto a ser exibido com linha cortada quando state="strikethrough" e type="inverted" (opcional).',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
        type: { summary: 'string' },
      },
    },
    caption: {
      description: 'Legenda ou informa√ß√£o adicional em destaque (opcional).',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
        type: { summary: 'string' },
      },
    },
    errorMessage: {
      description: 'Mensagem de erro exibida abaixo do conte√∫do (opcional).',
      control: 'text',
      table: {
        category: 'üìù Conte√∫do',
        type: { summary: 'string' },
      },
    },

    // === APAR√äNCIA ===
    showDivider: {
      description: 'Controla se deve exibir o divisor visual do item.',
      control: 'boolean',
      table: {
        category: 'üé® Apar√™ncia',
        type: { summary: 'boolean' },
        defaultValue: { summary: 'true' },
      },
    },
    type: {
      description:
        'Tipo visual que inverte a hierarquia do t√≠tulo e descri√ß√£o.',
      control: 'select',
      options: ['default', 'inverted'],
      table: {
        category: 'üé® Apar√™ncia',
        type: { summary: "'default' | 'inverted'" },
        defaultValue: { summary: "'default'" },
      },
    },

    // === ESTADOS E COMPORTAMENTO ===
    disabled: {
      description: 'Desabilita o item e todos os elementos internos.',
      control: 'boolean',
      table: {
        category: '‚öôÔ∏è Estados',
        type: { summary: 'boolean' },
        defaultValue: { summary: 'false' },
      },
    },
    loading: {
      description: 'Exibe skeleton de carregamento substituindo o conte√∫do.',
      control: 'boolean',
      table: {
        category: '‚öôÔ∏è Estados',
        type: { summary: 'boolean' },
        defaultValue: { summary: 'false' },
      },
    },
    state: {
      description: 'Estado visual do item que afeta cores e estilos.',
      control: 'select',
      options: [
        'default',
        'inactive',
        'positive',
        'warning',
        'highlight',
        'highlight-lead',
        'strikethrough',
      ],
      table: {
        category: '‚öôÔ∏è Estados',
        type: {
          summary:
            "'default' | 'inactive' | 'positive' | 'warning' | 'highlight' | 'highlight-lead' | 'strikethrough'",
        },
        defaultValue: { summary: "'default'" },
      },
    },
    blocked: {
      description: 'Exibe √≠cone de cadeado indicando funcionalidade bloqueada.',
      control: 'boolean',
      table: {
        category: '‚öôÔ∏è Estados',
        type: { summary: 'boolean' },
        defaultValue: { summary: 'false' },
      },
    },

    // === PROPS INTERNAS (n√£o edit√°veis diretamente) ===
    button: {
      description:
        'Props do Button. Use os controles "Button" abaixo para configurar.',
      control: false,
      table: {
        category: 'üîß Props Internas',
        type: { summary: 'ButtonProps' },
      },
    },
    tag: {
      description:
        'Props da Tag. Use os controles "Tag" abaixo para configurar.',
      control: false,
      table: {
        category: 'üîß Props Internas',
        type: { summary: 'TagProps' },
      },
    },

    // === CONTROLES DO PLAYGROUND (Button) ===
    hasButton: {
      name: 'Exibir Bot√£o',
      description: 'Mostra ou oculta o bot√£o no item.',
      control: 'boolean',
      table: {
        category: 'üîò Button (Playground)',
      },
    },
    buttonText: {
      name: 'Texto do Bot√£o',
      description: 'Texto exibido no bot√£o.',
      control: 'text',
      if: { arg: 'hasButton', truthy: true },
      table: {
        category: 'üîò Button (Playground)',
      },
    },
    buttonVariant: {
      name: 'Variante do Bot√£o',
      description: 'Estilo visual do bot√£o.',
      control: 'select',
      options: [
        'primary',
        'primaryCritical',
        'secondary',
        'secondaryCritical',
        'tertiary',
        'tertiaryCritical',
        'textTertiary',
        'textTertiaryCritical',
        'inverse',
      ],
      if: { arg: 'hasButton', truthy: true },
      table: {
        category: 'üîò Button (Playground)',
      },
    },

    // === CONTROLES DO PLAYGROUND (Tag) ===
    hasTag: {
      name: 'Exibir Tag',
      description: 'Mostra ou oculta a tag no item.',
      control: 'boolean',
      table: {
        category: 'üè∑Ô∏è Tag (Playground)',
      },
    },
    tagText: {
      name: 'Texto da Tag',
      description: 'Texto exibido na tag.',
      control: 'text',
      if: { arg: 'hasTag', truthy: true },
      table: {
        category: 'üè∑Ô∏è Tag (Playground)',
      },
    },
    tagType: {
      name: 'Tipo da Tag',
      description: 'Tipo da tag com cores predefinidas.',
      control: 'select',
      options: [
        'positive',
        'warning',
        'negative',
        'neutral',
        'neutral-02',
        'neutral-03',
        'default',
      ],
      if: { arg: 'hasTag', truthy: true },
      table: {
        category: 'üè∑Ô∏è Tag (Playground)',
      },
    },
  },
};

export default meta;

type Story = StoryObj<StoryControls>;

export const Usage: Story = {
  args: {
    title: 'Label',
    description: 'Description',
    caption: 'Caption',
    hasButton: true,
    buttonText: 'Ativar',
    buttonVariant: 'primary',
    hasTag: false,
    tagText: 'Status',
    tagType: 'positive',
    disabled: false,
    loading: false,
    type: 'default',
    state: 'default',
    showDivider: true,
    blocked: false,
  },
  render: ({
    hasButton,
    buttonText,
    buttonVariant,

    hasTag,
    tagText,
    tagType,
    ...args
  }) => (
    <SettingsListItem
      {...args}
      button={
        hasButton
          ? {
              children: buttonText,
              variant: buttonVariant,
            }
          : undefined
      }
      tag={
        hasTag
          ? {
              children: tagText,
              variant: 'default',
              type: tagType,
            }
          : undefined
      }
    />
  ),
  decorators: [
    (StoryComponent: React.ComponentType): JSX.Element => (
      <div style={{ width: '360px' }}>
        <StoryComponent />
      </div>
    ),
  ],
};

// Exemplos pr√©-configurados mostrando diferentes combina√ß√µes
export const QuickExamples: Story = {
  parameters: {
    docs: {
      description: {
        story:
          '‚ú® **Exemplos de uso** mostrando as principais combina√ß√µes de props do SettingsListItem com Button e Tag.',
      },
    },
    controls: { disable: true },
  },
  render: () => (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '16px',
        width: '360px',
      }}
    >
      <SettingsListItem
        title="Com Button Prim√°rio"
        description="Item com bot√£o de a√ß√£o principal"
        caption="Clique para ativar"
        button={{
          children: 'Ativar',
          variant: 'primary',
          size: 'sm',
        }}
      />

      <SettingsListItem
        title="Com Tag Positiva"
        description="Item com status ativo"
        caption="Funcionalidade habilitada"
        tag={{
          children: 'Ativo',
          variant: 'default',
          type: 'positive',
        }}
      />

      <SettingsListItem
        title="Com Tag de Alerta"
        description="Item que precisa de aten√ß√£o"
        caption="Configura√ß√£o pendente"
        tag={{
          children: 'Aten√ß√£o',
          variant: 'default',
          type: 'warning',
        }}
      />
    </div>
  ),
};

export const WithButton: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <SettingsListItem
      title="Autentica√ß√£o de Dois Fatores"
      description="Adicione uma camada extra de seguran√ßa √† sua conta"
      caption="Recomendado para maior seguran√ßa"
      button={{
        children: 'Ativar',
        variant: 'primary',
        size: 'sm',
      }}
    />
  ),
};

export const WithTag: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <SettingsListItem
      title="Sincroniza√ß√£o Autom√°tica"
      description="Sincronize seus dados automaticamente em todos os dispositivos"
      caption="√öltima sincroniza√ß√£o: agora"
      tag={{
        children: 'Ativo',
        variant: 'default',
      }}
    />
  ),
};

export const WithError: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <SettingsListItem
      title="Backup de Dados"
      description="Configure o backup autom√°tico dos seus dados"
      caption="Configura√ß√£o pendente"
      errorMessage="Falha ao conectar com o servi√ßo de backup"
      button={{
        children: 'Tentar Novamente',
        variant: 'secondary',
        size: 'sm',
      }}
    />
  ),
};

export const Disabled: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <SettingsListItem
      title="An√°lise de Comportamento"
      description="Permita que coletemos dados an√¥nimos para melhorar o servi√ßo"
      caption="Funcionalidade temporariamente indispon√≠vel"
      disabled
      button={{
        children: 'Configurar',
        variant: 'secondary',
        size: 'sm',
      }}
    />
  ),
};

export const Loading: Story = {
  parameters: {
    controls: { disable: true },
  },
  render: () => (
    <div style={{ width: '320px' }}>
      <SettingsListItem
        title="Tema da Interface"
        description="Escolha entre tema claro, escuro ou autom√°tico"
        caption="Aplicando altera√ß√µes..."
        loading
        button={{
          children: 'Salvar',
          variant: 'primary',
          size: 'sm',
        }}
      />
    </div>
  ),
};

export const States: Story = {
  parameters: {
    docs: {
      description: {
        story:
          'üé® **Estados visuais** demonstrando diferentes valores da prop `state` e seus efeitos visuais.',
      },
    },
    controls: { disable: true },
  },
  render: () => (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '16px',
        width: '400PX',
      }}
    >
      <SettingsListItem
        title="Estado Padr√£o"
        description="Item em estado normal de funcionamento"
        caption="Configura√ß√£o ativa"
        state="default"
        tag={{ children: 'Normal', variant: 'default', type: 'neutral' }}
      />

      <SettingsListItem
        title="Estado Inativo"
        description="Item temporariamente desativado"
        caption="Funcionalidade pausada"
        state="inactive"
        type="inverted"
        tag={{ children: 'Inativo', variant: 'default', type: 'neutral-02' }}
      />

      <SettingsListItem
        title="Estado Positivo"
        description="Item funcionando perfeitamente"
        caption="Tudo funcionando bem"
        state="positive"
        type="inverted"
        tag={{ children: 'Sucesso', variant: 'default', type: 'positive' }}
      />

      <SettingsListItem
        title="Estado de Aviso"
        description="Item que precisa de aten√ß√£o"
        caption="Verifica√ß√£o recomendada"
        state="warning"
        type="inverted"
        tag={{ children: 'Aten√ß√£o', variant: 'default', type: 'warning' }}
      />

      <SettingsListItem
        title="Estado em Destaque"
        description="Item destacado para chamar aten√ß√£o"
        caption="Configura√ß√£o importante"
        state="highlight"
        type="inverted"
        button={{ children: 'Configurar', variant: 'primary', size: 'sm' }}
      />

      <SettingsListItem
        title="Destaque Principal"
        description="Item com m√°xima prioridade visual"
        caption="A√ß√£o priorit√°ria necess√°ria"
        state="highlight-lead"
        button={{
          children: 'A√ß√£o Priorit√°ria',
          variant: 'primary',
          size: 'sm',
        }}
      />
    </div>
  ),
};

export const InvertedType: Story = {
  parameters: {
    docs: {
      description: {
        story:
          'üîÑ **Tipo invertido** demonstrando como `type="inverted"` altera a hierarquia visual do t√≠tulo e descri√ß√£o.',
      },
    },
    controls: { disable: true },
  },
  render: () => (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '16px',
        width: '600PX',
      }}
    >
      <SettingsListItem
        title="Notifica√ß√µes Push"
        description="Tipo padr√£o - t√≠tulo maior, descri√ß√£o menor"
        caption="Hierarquia normal"
        type="inverted"
        button={{ children: 'Configurar', variant: 'secondary', size: 'sm' }}
      />

      <SettingsListItem
        title="Notifica√ß√µes Push"
        description="Tipo invertido - descri√ß√£o maior, t√≠tulo menor"
        caption="Hierarquia invertida"
        type="inverted"
        button={{ children: 'Configurar', variant: 'secondary', size: 'sm' }}
      />

      <SettingsListItem
        title="Configura√ß√£o Avan√ßada"
        description="No tipo invertido, a descri√ß√£o ganha mais destaque visual"
        caption="Ideal quando a descri√ß√£o √© mais importante"
        type="inverted"
        state="highlight"
        tag={{ children: 'Avan√ßado', variant: 'default', type: 'neutral-03' }}
      />
    </div>
  ),
};

export const StrikethroughExample: Story = {
  parameters: {
    docs: {
      description: {
        story:
          '‚úÇÔ∏è **Texto cortado** demonstrando como usar `strikethroughDescription` com `type="inverted"` e `state="strikethrough"`.',
      },
    },
    controls: { disable: true },
  },
  render: () => (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '16px',
        width: '600',
      }}
    >
      <SettingsListItem
        title="Plano Premium"
        description="Novo pre√ßo: R$ 29,90/m√™s"
        strikethroughDescription="Pre√ßo antigo: R$ 39,90/m√™s"
        caption="Oferta limitada at√© o final do m√™s"
        type="inverted"
        state="strikethrough"
        button={{ children: 'Assinar', variant: 'primary', size: 'sm' }}
      />

      <SettingsListItem
        title="Upgrade de Conta"
        description="Funcionalidades premium liberadas"
        strikethroughDescription="Conta b√°sica"
        caption="Upgrade realizado com sucesso"
        type="inverted"
        state="strikethrough"
        tag={{ children: 'Atualizado', variant: 'default', type: 'positive' }}
      />
    </div>
  ),
};

export const BlockedItems: Story = {
  parameters: {
    docs: {
      description: {
        story:
          'üîí **Itens bloqueados** demonstrando o uso da prop `blocked` que exibe √≠cone de cadeado.',
      },
    },
    controls: { disable: true },
  },
  render: () => (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '16px',
        width: '360px',
      }}
    >
      <SettingsListItem
        title="Funcionalidade Premium"
        description="Esta funcionalidade est√° dispon√≠vel apenas no plano premium"
        caption="Fa√ßa upgrade para acessar"
        blocked
      />

      <SettingsListItem
        title="An√°lise Avan√ßada"
        description="Relat√≥rios detalhados e insights personalizados"
        caption="Bloqueado - upgrade necess√°rio"
        blocked
      />

      <SettingsListItem
        title="API Enterprise"
        description="Acesso completo √† API com limites estendidos"
        caption="Funcionalidade corporativa"
        blocked
        disabled
      />

      <SettingsListItem
        title="Funcionalidade Premium"
        description="Esta funcionalidade est√° dispon√≠vel apenas no plano premium"
        caption="Fa√ßa upgrade para acessar"
        blocked
        type="inverted"
      />
    </div>
  ),
};

export const Complete: Story = {
  parameters: {
    docs: {
      description: {
        story:
          'üìö **Vis√£o geral completa** com exemplos dos principais casos de uso do componente.',
      },
    },
    controls: { disable: true },
  },
  render: () => (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
      <SettingsListItem
        title="Invertido"
        description="Item com descri√ß√£o invertida"
        caption="Legenda invertida"
        type="inverted"
        button={{
          children: 'Label',
        }}
      />

      <SettingsListItem
        title="Com Bot√£o de A√ß√£o"
        description="Item com bot√£o para realizar a√ß√µes"
        caption="Clique no bot√£o para configurar"
        button={{
          children: 'Configurar',
          variant: 'primary',
          size: 'sm',
        }}
      />

      <SettingsListItem
        title="Com Status Ativo"
        description="Item com tag indicando status"
        caption="Funcionalidade habilitada"
        tag={{
          children: 'Ativo',
          variant: 'default',
        }}
      />

      <SettingsListItem
        title="Com Erro"
        description="Item com mensagem de erro"
        caption="Verifica√ß√£o falhhou"
        errorMessage="N√£o foi poss√≠vel validar as configura√ß√µes"
        button={{
          children: 'Tentar Novamente',
          variant: 'secondary',
          size: 'sm',
        }}
      />

      <SettingsListItem
        title="Carregando"
        description="Item em estado de carregamento"
        caption="Processando..."
        loading
        button={{
          children: 'Processando',
          variant: 'primary',
          size: 'sm',
        }}
      />

      <SettingsListItem
        title="Desabilitado"
        description="Item temporariamente indispon√≠vel"
        caption="Funcionalidade em manuten√ß√£o"
        disabled
        tag={{
          children: 'Indispon√≠vel',
          variant: 'default',
        }}
      />
    </div>
  ),
};
